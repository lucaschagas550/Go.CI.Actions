name: kubernetes

on:
  workflow_call: #sera chamado por outro workflow

jobs:

  EKS:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3 #baixa o codigo que esta sendo enviado no commmit para a maquina ubuntu que foi provisionado
    
    - name: configurando credenciais da AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ID_CHAVE_ACESSO }}
        aws-secret-access-key: ${{ secrets.CHAVE_SECRETA }}
        aws-region: us-east-2
        
        
    - run: git clone https://github.com/leollo98/Infra_CI_Kubernetes.git

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3 #Configurando o terraform
      
    - run: terraform -chdir=Infra_CI_Kubernetes/env/Homolog init # Isso é um sinalizador (flag) que define o diretório no qual o comando Terraform será executado
     #'init' é usado para inicializar um projeto Terraform.

    - run: terraform -chdir=Infra_CI_Kubernetes/env/Homolog apply -auto-approve #Apply queremos aplicar o terraform, e o precisamos aprovar o q esta sendo aplicado com -auto-approve como parametro
    
    - run: echo "$(terraform -chdir=Infra_CI_Kubernetes/env/Homolog output -raw IP_db)" #echo garante que saira uma string, $ garante que tudo dentro sera executado como um comando e saira uma string
      id: URL
    
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3 #usar kubectl para interagir com o kubernets
      
    - run: aws sts get-caller-identity
    
    - run: aws eks update-kubeconfig --region us-west-2 --name homolog2 #Criar arquivo do kubectl config, com a regiao e o cluster
    
    - run: kubectl get svc
    
    - run: kubectl delete secret dbhost --ignore-not-found #deleta o segredo. Se nao existir o segredo ele ignora
    - run: kubectl create secret generic dbhost --from-literal=HOST=${{ steps.URL.outputs.stdout }} # obtendo a saida padrao (existe uma saida de erro tbm) do step, com stdout
    
    - run: kubectl delete secret dbport --ignore-not-found
    - run: kubectl create secret generic dbport --from-literal=DBPORT=${{secrets.DBPORT}}
    
    - run: kubectl delete secret dbuser --ignore-not-found
    - run: kubectl create secret generic dbuser --from-literal=USER=${{secrets.DBUSER}}
    
    - run: kubectl delete secret dbpassword --ignore-not-found
    - run: kubectl create secret generic dbpassword --from-literal=PASSWORD=${{secrets.DBPASSWORD}}
    
    - run: kubectl delete secret dbname --ignore-not-found
    - run: kubectl create secret generic dbname --from-literal=DBNAME=${{secrets.DBNAME}}
    
    - run: kubectl delete secret port --ignore-not-found
    - run: kubectl create secret generic port --from-literal=PORT=8000 
    
    - run: kubectl apply -f Infra_CI_Kubernetes/go.yaml 
    
    - run: kubectl set image deployment/go-api go=leonardosartorello/go_ci:${{github.run_number}} #Atualizando a aplicacao
