name: Entrega continua

on:
  workflow_call:
  
jobs:

  ECS: # Servico de container da aws
    runs-on: ubuntu-latest
    continue-on-error: true #continua a pipeline mesmo com erro no job
    steps:
    - name: configurando credenciais da AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ID_CHAVE_ACESSO }}
        aws-secret-access-key: ${{ secrets.CHAVE_SECRETA }}
        aws-region: us-east-2
    
    - name: Obtendo arquivo da tarefa
      run: aws ecs describe-task-definition --task-definition Tarefa_API-GO --query taskDefinition > task-definition.json

    - name: copia do task-definition #Para o rollback
      run: cp task-definition.json task-definition.json.old #Copiando o arquivo do passo anterior e deixando como backup
      
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def #usar a saida dessa passo em outros passos
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: Go
        image: leonardosartorello/go_ci:${{github.run_number}} #run_number Um número exclusivo para cada execução
        environment-variables: |
          HOST=${{ secrets.DBHOST }}
          USER=${{ secrets.DBUSER }}
          PASSWORD=${{ secrets.DBPASSWORD }}
          DBNAME=${{ secrets.DBNAME }}
          DBPORT=${{ secrets.DBPORT }}
          PORT=8000
          
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }} #Pega a saida de task-definition que eh o id: task-def
        service: Servico_API-Go
        cluster: API-Go
        wait-for-service-stability: true

    - name: Requisição #Testar aplicacao para verificar se nao tem problemas
      continue-on-error: true #Continuar mesmo se der erro
      run: echo "REQUEST=0" >> $GITHUB_ENV ; sleep 30s ; wget LB-API-Go-908865819.us-east-2.elb.amazonaws.com:8000/leo || echo "REQUEST=1" >> $GITHUB_ENV
      #REQUEST = 0 Significa que o comando foi feito com sucesso
      #>> Redireciona a saida para uma variavel de ambiente, no caso o Request, e colocar no $GITHUB_ENV
      #wget LB-API-Go-908865819.us-east-2.elb.amazonaws.com:8000/leo endereco da api, se retornar 0 deu certo, se for outro valor seta no request=1
      #; separa os comandos para ser executado um por vez

    - name: Deploy Amazon ECS task definition #Faz o Rollback
      if: ${{ env.REQUEST != 0 }} #verifica valor da variavel de ambiente REQUEST que foi no step anterior
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json.old
        service: Servico_API-Go
        cluster: API-Go
        wait-for-service-stability: true
        
